import java.sql.*;

public class CredentialRepo {
    private final Connection connection;

    // Handles the write operations for the Credentials.
    // This is meant for people registering for the first time.
    // Returns true if successful, else it returns false
    public Integer register(CredentialModel model) {
        try {
            String sql = "INSERT INTO credential(username, password, customer_id) VALUES (?, ?, ?)";
            PreparedStatement statement = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
            statement.setString(1, model.getUsername());
            statement.setString(2, model.getPassword());
            statement.setInt(3, model.getCustomerId());
            statement.executeUpdate();
            ResultSet result = statement.getGeneratedKeys();

            // Retrieve the newest credential_id (autogenerated)
            result.next();
            return result.getInt(1);
        }
        catch (SQLException e) {
            e.printStackTrace();
            return null;
        }
    }

    // Retrieves a credential record based on the ID number.
    // This would identify if a user tried to create a second login.
    // If null is returned, it means it did not locate a login for this customer id.
    public CredentialModel getCredentialsByCustomerId(Integer id) {
        try {
            String sql = "SELECT * from credential WHERE customer_id = ?";
            PreparedStatement statement = connection.prepareStatement(sql);
            statement.setInt(1, id);
            ResultSet results = statement.executeQuery();

            CredentialModel model = new CredentialModel();
            while(results.next()) {
                model.setCredentialId(results.getInt("credential_id"));
                model.setUsername(results.getString("username"));
                model.setPassword(results.getString("password"));
                model.setCustomerId(results.getInt("customer_id"));
            }
            return model;
        }
        catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }

    // Retrieves a single credential record based on the username and password.
    // If the username and password do not match, then null is returned.
    // Intended to be used with existing registrations (ex. login attempt)
    public CredentialModel getByCredentials(String username, String password) {
        try {
            String sql = "SELECT * from credential WHERE (username = ? AND password = ?)";
            PreparedStatement statement = connection.prepareStatement(sql);
            statement.setString(1, username);
            statement.setString(2, password);
            ResultSet results = statement.executeQuery();

            CredentialModel model = null;
            while(results.next()) {
                model = new CredentialModel();
                model.setCredentialId(results.getInt("credential_id"));
                model.setUsername(results.getString("username"));
                model.setPassword(results.getString("password"));
                model.setCustomerId(results.getInt("customer_id"));
            }
            return model;
        }
        catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }

    // Checks if a username is taken (unique)
    // Returns true if the username already exists in the database, else returns false
    // Intended to be used with new registrations
    public Boolean usernameIsInUse(String username) {
        try {
            String sql = "SELECT * from credential WHERE username = ?";
            PreparedStatement statement = connection.prepareStatement(sql);
            statement.setString(1, username);
            ResultSet results = statement.executeQuery();

            if(results.next()) {
                return true;
            }
            else {
                return false;
            }
        }
        catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }

    // Constructor: Initialize the connection
    CredentialRepo() {
        this.connection = ConnectionManager.getConnection();
    }
}
